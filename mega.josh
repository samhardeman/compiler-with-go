// Global variables
global int globalInt

global char globalChar

global float globalFloat = 0.0

global bool boolFlag

// Function to print an integer
func printInt(int value) {
    write(value)
}

// Function to print a character
func printChar(char value) {
    write(value)
}

// Function to print a floating-point number
func printFloat(float value) {
    write(value)
}

// Function to compute the sum of two integers with additional logic
func computeSum(int a, int b) int {
    int sum
    int doubleSum
    int temp

    sum = a + b
    temp = sum + 5
    doubleSum = temp * 2
    globalFloat = globalFloat + sum

    if (doubleSum > 50) {
        globalInt = globalInt + 10
        printChar('H')
    } else {
        globalInt = globalInt - 5
        printChar('L')
    }

    printInt(doubleSum)
    return doubleSum
}

// Function to display results with additional logic
func displayResult(int result) {
    int localCopy

    localCopy = result
    localCopy = localCopy + 1

    int divided = localCopy / 2
    int isEven = divided * 2
    if (isEven == localCopy) {
        globalChar = 'E'
    } else {
        globalChar = 'O'
    }

    printChar(globalChar)

    globalInt = localCopy

    localCopy = localCopy * 3
    printInt(localCopy)
}

// Function to multiply two integers with added complexity
func multiply(int x, int y) int {
    int product
    int square
    int tempResult

    product = x * y
    square = x * x
    tempResult = product + square

    if (tempResult > 50) {
        globalFloat = globalFloat / 2.0
        printFloat(globalFloat)
    }

    printInt(tempResult)
    return tempResult
}

// Function to calculate the factorial of a number (iteratively)
func factorial(int n) int {
    int result
    result = 1

    int start = n

    for (int i = 1; i <= start; i = i + 1) {
        result = result * i
        printInt(result)
    }

    return result
}

// Function to check if a number is prime
func isPrime(int n) int {
    int prime = n
    int result = 0
    if (prime <= 1) {
        printChar('N')
        return result
    }

    for (int i = 2; i < prime; i = i + 1) {
        int divResult = prime / i
        int product = divResult * i
        int remainder = prime - product
        if (remainder == 0) {
            printChar('N')
            return result
        }
    }

    printChar('P')
    return 1
}

// Execution starts here
int localInt = 15
float localFloat = 3.7

// Initialize global variables
globalInt = 20
globalChar = 'C'

// Print initial global values
printInt(globalInt)
printChar(globalChar)
printFloat(globalFloat)

// Complex arithmetic expression
int result = localInt * 2
result = result + 3
int math = 5 - 2
result = result / math
result = result + globalInt

global int fact = 120

if (result > 10) {
    int temp = result * 2
    displayResult(temp)
} else {
    int temp = result - 1
    temp = temp + 3
    displayResult(temp)
}

// For loop with nested logic
for (int i = 0; i < 10; i = i + 1) {
    int product
    int square
    int tempResult

    int p = i
    int q = i + 1

    product = p * q
    square = p * p
    tempResult = product + square

    if (tempResult > 50) {
        globalFloat = globalFloat / 2.0
        printFloat(globalFloat)
    }

    printInt(tempResult)
    result = tempResult

    if (result > 20) {
        globalInt = result
        i = 10
    } else {
        globalInt = globalInt + 1
    }

    printInt(i)
}

// Call factorial function
result = fact
printInt(result)

// Check for primality
int primeCheck = 1
bool isPrimeNumber = primeCheck == 1

if (isPrimeNumber) {
    displayResult(result)
} else {
    displayResult(result - 10)
}

// Additional redundant computation
int temp = 5 * 4
result = temp + 10
printInt(result)

// Final function call
result = computeSum(localInt, 20)
displayResult(result)
